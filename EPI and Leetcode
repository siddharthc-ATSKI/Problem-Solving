// MULTIPLY TWO ARBITRARY PRECISION INTEGERS
// multiplying two large number which are represented in the form of arrays

#include<bits/stdc++.h>
#include<vector>
using namespace std;

vector<int> Multiply(vector<int> num1, vector<int> num2) {
    const int sign = (num1.front() < 0) ^ (num2.front() < 0) ? -1 : 1;
    num1.front() = abs(num1.front());
    num2.front() = abs(num2.front());

    vector<int> result(num1.size() + num2.size(), 0);

    for(int i = num1.size() - 1; i >= 0; i--) {
        for(int j = num2.size() - 1; j >= 0; j--) {
            result[i + j + 1] += num1[i] * num2[j];
            result[i + j] += result[i + j + 1] / 10;
            result[i + j + 1]  %= 10;
        }
    }

    if(result.empty())
        return {0};

    result.front() *= sign;

    return result;
}

int main() {
    vector<int> num1 {7, 5, 3, 9, 7};
    vector<int> num2 {9, 5, 7, 8, 6};

    vector<int> answer = Multiply(num1, num2);

    for(int i=0; i < num1.size(); i++)
        cout<<num1[i];
    
    cout<<" --> number 1"<<endl;

    for(int i=0; i < num2.size(); i++)
        cout<<num2[i];
    
    cout<<" --> number 2"<<endl;

    cout<<"-------------------------------------------"<<endl;

    for(int i=0; i < answer.size(); i++)
        cout<<answer[i];
    
    cout<<" --> product of num1 and num2"<<endl;

    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ADVANCE THROUGH AN ARRAY
// Can it reach till the end of array or not

#include<bits/stdc++.h>
using namespace std;

bool canReachEnd(const vector<int>& max_advance_steps) {
    int max_reach = 0;
    int max_so_far = 0;
    // int last_index = max_advance_steps.size() - 1;

    for(int i=0; i < max_advance_steps.size() - 1 && i <= max_so_far; i++) {
        max_reach = i + max_advance_steps[i];
        max_so_far = max(max_reach, max_so_far);
        cout<<max_so_far<<endl;

        if(max_so_far >= max_advance_steps.size() - 1)
            break;
    }

    return max_so_far >= (max_advance_steps.size() - 1);
}

int main() {
    vector<int> arr {3,3,1,0,2,0,1};

    if(canReachEnd(arr))
        cout<<"Yes can reach till end"<<endl;
    
    else
        cout<<"Can't reach till end"<<endl;

    return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
